{
  "swagger": "2.0",
  "info": {
    "description": "This is challenge chapter 8 documentation from following repository : https://github.com/berbinarbinar/binar-challenge-chapter-8 provided by Binar Academy teams.",
    "version": "1.0.0",
    "title": "Challenge Chapter 8 Documentation ",
    "termsOfService": "http://localhost:4000",
    "contact": {
      "email": "apiteam@mail.co"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "localhost:4000",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "players",
      "description": "Manage players"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/players": {
      "post": {
        "tags": [
          "players"
        ],
        "summary": "Create new players",
        "description": "",
        "operationId": "create",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Add a new player",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Player"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "data"
          },
          "500": {
            "description": "Some error occurred while creating the Player."
          }
        }
      },
      "get": {
        "tags": [
          "players"
        ],
        "summary": "Get all players (with query parameters)",
        "description": "",
        "operationId": "findAll(parameter)",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "body",
            "description": "Query data by parameters",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "username",
                "email",
                "experience",
                "lvl"
              ],
              "default": "username"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "data"
          },
          "500": {
            "description": "Some error occurred while retrieving players."
          }
        }
      }
    },
    "/players/{playerId}": {
      "get": {
        "tags": [
          "players"
        ],
        "summary": "Find a single player with an id",
        "description": "",
        "operationId": "findById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "playerId",
            "in": "path",
            "description": "ID of player to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "data"
          },
          "500": {
            "description": "Error retrieving player"
          }
        }
      },
      "put": {
        "tags": [
          "players"
        ],
        "summary": "Update a player by the id in the request",
        "description": "",
        "operationId": "update",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "playerId",
            "in": "path",
            "description": "ID of player to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "update",
            "description": "Update player",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Player"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "data"
          },
          "400": {
            "description": "Cannot update player, maybe player was not found or req.body is empty!"
          },
          "500": {
            "description": "Error updating player"
          }
        }
      },
      "delete": {
        "tags": [
          "players"
        ],
        "summary": "Delete a player with id",
        "description": "",
        "operationId": "delete",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "playerId",
            "in": "path",
            "description": "ID of player to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Player was deleted successfully!"
          },
          "400": {
            "description": "Cannot delete player, maybe player was not found!"
          },
          "500": {
            "description": "Could not delete player"
          }
        }
      }
    },
    "/players/exp/{playerId}": {
      "post": {
        "tags": [
          "players"
        ],
        "summary": "Add player experience by certain amount",
        "description": "",
        "operationId": "getExperience",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "playerId",
            "in": "path",
            "description": "ID of player to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "experience",
            "description": "Add a new player experience",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Experience"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Player has more experience."
          },
          "400": {
            "description": "Cannot update player"
          },
          "500": {
            "description": "Error updating player exp"
          }
        }
      }
    }
  },
  "definitions": {
    "Player": {
      "type": "object",
      "required": [
        "username",
        "email",
        "password"
      ],
      "properties": {
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "experience": {
          "type": "integer",
          "format": "int64"
        },
        "lvl": {
          "type": "integer",
          "format": "int64"
        }
      },
      "xml": {
        "name": "Player"
      }
    },
    "Experience": {
      "type": "object",
      "properties": {
        "exp": {
          "type": "integer",
          "format": "int64"
        },
        "lvl": {
          "type": "integer",
          "format": "int64"
        }
      },
      "xml": {
        "name": "Player"
      }
    }
  }
}